lua_shared_dict auto_ssl 1m;
lua_shared_dict auto_ssl_settings 64k;
resolver 8.8.8.8;

init_by_lua_block {

  local redis = require "resty.redis"
  local redis_options = { host = "127.0.0.1", port = 6379 , prefix = "ssl" }

  local function get_redis_instance(redis_options)

    local instance = ngx.ctx.auto_ssl_redis_instance

    if instance then
      return instance
    end

    instance = redis:new()

    local ok, err

    if redis_options["socket"] then
      ok, err = instance:connect(redis_options["socket"])
    else
      ok, err = instance:connect(redis_options["host"], redis_options["port"])
    end

    if not ok then
      return false, err
    end

    if redis_options["auth"] then
      ok, err = instance:auth(redis_options["auth"])
      if not ok then
        return false, err
      end
    end

    ngx.ctx.auto_ssl_redis_instance = instance
    return instance
  end

  auto_ssl = (require "resty.auto-ssl").new()

  auto_ssl:set("redis", redis_options)

  auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")

  auto_ssl:set("allow_domain", function(domain)

    local certstorage = auto_ssl:get("storage")

    local fullchain_pem, privkey_pem = certstorage:get_cert(domain)

    if fullchain_pem then
            return true
    end

    print('yes')

    local redis_instance, instance_err = get_redis_instance(redis_options)
    if instance_err then
      return nil, instance_err
    end


    local res, err = redis_instance:get('domain:' .. domain)

    if res == ngx.null then
      return false
    end

    return true
  end)

  auto_ssl:init()
}

init_worker_by_lua_block {
  auto_ssl:init_worker()
}

server {
  listen 127.0.0.1:8999;
  client_body_buffer_size 128k;
  client_max_body_size 128k;
  location / {
    content_by_lua_block {
      auto_ssl:hook_server()
    }
  }
}